#include <stdio.h>
#include "mpi.h"
/* This example handles a 12 x 12 mesh, on 4 processors only. */
#define maxn 12

int main(int argc,char **argv)
{
  int rank;
  int size;
  int errcnt;
  int toterr;
  int i;
  int j;
  MPI_Status status;
  double xlocal[3 + 2][12];
  MPI_Init(&argc,&argv);
  MPI_Comm_rank(MPI_COMM_WORLD,&rank);
  MPI_Comm_size(MPI_COMM_WORLD,&size);
  if (size != 4) 
    MPI_Abort(MPI_COMM_WORLD,1);
/* xlocal[][0] is lower ghostpoints, xlocal[][maxn+2] is upper */
/* Fill the data as specified */
/* Send up unless I'm at the top, then receive from below */
/* Note the use of xlocal[i] for &xlocal[i][0] */
  if (rank < size - 1) 
    MPI_Send(xlocal[12 / size],12,MPI_DOUBLE,rank + 1,0,MPI_COMM_WORLD);
  if (rank > 0) 
    MPI_Recv(xlocal[0],12,MPI_DOUBLE,rank - 1,0,MPI_COMM_WORLD,&status);
/* Send down unless I'm at the bottom */
  if (rank > 0) 
    MPI_Send(xlocal[1],12,MPI_DOUBLE,rank - 1,1,MPI_COMM_WORLD);
  if (rank < size - 1) 
    MPI_Recv(xlocal[12 / size + 1],12,MPI_DOUBLE,rank + 1,1,MPI_COMM_WORLD,&status);
/* Check that we have the correct results */
  MPI_Reduce((&errcnt),(&toterr),1,MPI_INT,MPI_SUM,0,MPI_COMM_WORLD);
  MPI_Finalize();
  return 0;
}
